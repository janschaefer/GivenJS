/**
 * Generates a HTML report form a given set of JSON report files
 *
 * @module given-html-report
 */

'use strict'

var fs = require('fs-extra')

var glob = require('glob')


/**
 *
 * @param {[string]} inputArgs list of input arguments, which contain the JSON reports generated by GivenJS or JGiven
 * @param {string} targetDir the directory where to generate the HTML report to
 */
module.exports = function generateHtmlReport (inputArgs, targetDir) {
  console.log('Generating GivenJS report to directory ' + targetDir + ' ...')

  console.log('Creating ' + targetDir)
  fs.mkdirpSync(targetDir)

  copyStaticData(targetDir)
  generateDataFiles(inputArgs, targetDir)

}

function copyStaticData (targetDir) {
  var appDir = __dirname + '/app'
  console.log('Copy static data from ' + appDir + ' to ' + targetDir)
  fs.copySync(appDir, targetDir)
}

function generateDataFiles (inputArgs, targetDir) {
  var dataDir = targetDir + '/data'

  console.log('Generate data files to ' + dataDir)

  fs.mkdirpSync(dataDir)


  var jsonInputs = readInputFiles(inputArgs)

  var metaData = {
    created: new Date(),
    data: ['data0.js']
  }

  console.log('Data: ' + jsonInputs)

  var dataJsonp = 'jgivenReport.addScenarios(' + JSON.stringify(jsonInputs) + ');'
  fs.writeFileSync(dataDir + '/data0.js', dataJsonp);

  var metaDataJsonp = 'jgivenReport.setMetaData(' + JSON.stringify(metaData) + ');'
  fs.writeFileSync(dataDir + '/metaData.js', metaDataJsonp);

  generateTagFile(dataDir)
}

function generateTagFile (dataDir) {
  var tagFile = {
    tagTypeMap: {
      JS: {
        name: 'JS'
      }
    },
    tags: {
      JS: {
        tagType: 'JS'
      }
    }
  }
  var jsonpString = 'jgivenReport.setTags(' + JSON.stringify(tagFile) + ');'
  fs.writeFileSync(dataDir + '/tags.js', jsonpString);
}

function readInputFiles (inputArgs) {
  var jsonInputs = []
  inputArgs.forEach(function (arg) {
    var files = glob.sync(arg)
    files.forEach(function (file) {
      console.log('Reading ' + file)
      jsonInputs.push(JSON.parse(fs.readFileSync(file, 'utf8')))
    })
  })
  return jsonInputs
}
